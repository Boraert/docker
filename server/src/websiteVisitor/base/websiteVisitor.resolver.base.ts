/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWebsiteVisitorArgs } from "./CreateWebsiteVisitorArgs";
import { UpdateWebsiteVisitorArgs } from "./UpdateWebsiteVisitorArgs";
import { DeleteWebsiteVisitorArgs } from "./DeleteWebsiteVisitorArgs";
import { WebsiteVisitorFindManyArgs } from "./WebsiteVisitorFindManyArgs";
import { WebsiteVisitorFindUniqueArgs } from "./WebsiteVisitorFindUniqueArgs";
import { WebsiteVisitor } from "./WebsiteVisitor";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { WebsiteVisitorService } from "../websiteVisitor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WebsiteVisitor)
export class WebsiteVisitorResolverBase {
  constructor(
    protected readonly service: WebsiteVisitorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WebsiteVisitor",
    action: "read",
    possession: "any",
  })
  async _websiteVisitorsMeta(
    @graphql.Args() args: WebsiteVisitorFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WebsiteVisitor])
  @nestAccessControl.UseRoles({
    resource: "WebsiteVisitor",
    action: "read",
    possession: "any",
  })
  async websiteVisitors(
    @graphql.Args() args: WebsiteVisitorFindManyArgs
  ): Promise<WebsiteVisitor[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WebsiteVisitor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WebsiteVisitor",
    action: "read",
    possession: "own",
  })
  async websiteVisitor(
    @graphql.Args() args: WebsiteVisitorFindUniqueArgs
  ): Promise<WebsiteVisitor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WebsiteVisitor)
  @nestAccessControl.UseRoles({
    resource: "WebsiteVisitor",
    action: "create",
    possession: "any",
  })
  async createWebsiteVisitor(
    @graphql.Args() args: CreateWebsiteVisitorArgs
  ): Promise<WebsiteVisitor> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WebsiteVisitor)
  @nestAccessControl.UseRoles({
    resource: "WebsiteVisitor",
    action: "update",
    possession: "any",
  })
  async updateWebsiteVisitor(
    @graphql.Args() args: UpdateWebsiteVisitorArgs
  ): Promise<WebsiteVisitor | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WebsiteVisitor)
  @nestAccessControl.UseRoles({
    resource: "WebsiteVisitor",
    action: "delete",
    possession: "any",
  })
  async deleteWebsiteVisitor(
    @graphql.Args() args: DeleteWebsiteVisitorArgs
  ): Promise<WebsiteVisitor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(
    @graphql.Parent() parent: WebsiteVisitor,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
