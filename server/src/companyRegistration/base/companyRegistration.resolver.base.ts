/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCompanyRegistrationArgs } from "./CreateCompanyRegistrationArgs";
import { UpdateCompanyRegistrationArgs } from "./UpdateCompanyRegistrationArgs";
import { DeleteCompanyRegistrationArgs } from "./DeleteCompanyRegistrationArgs";
import { CompanyRegistrationCountArgs } from "./CompanyRegistrationCountArgs";
import { CompanyRegistrationFindManyArgs } from "./CompanyRegistrationFindManyArgs";
import { CompanyRegistrationFindUniqueArgs } from "./CompanyRegistrationFindUniqueArgs";
import { CompanyRegistration } from "./CompanyRegistration";
import { User } from "../../user/base/User";
import { CompanyRegistrationService } from "../companyRegistration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CompanyRegistration)
export class CompanyRegistrationResolverBase {
  constructor(
    protected readonly service: CompanyRegistrationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CompanyRegistration",
    action: "read",
    possession: "any",
  })
  async _companyRegistrationsMeta(
    @graphql.Args() args: CompanyRegistrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CompanyRegistration])
  @nestAccessControl.UseRoles({
    resource: "CompanyRegistration",
    action: "read",
    possession: "any",
  })
  async companyRegistrations(
    @graphql.Args() args: CompanyRegistrationFindManyArgs
  ): Promise<CompanyRegistration[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CompanyRegistration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CompanyRegistration",
    action: "read",
    possession: "own",
  })
  async companyRegistration(
    @graphql.Args() args: CompanyRegistrationFindUniqueArgs
  ): Promise<CompanyRegistration | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompanyRegistration)
  @nestAccessControl.UseRoles({
    resource: "CompanyRegistration",
    action: "create",
    possession: "any",
  })
  async createCompanyRegistration(
    @graphql.Args() args: CreateCompanyRegistrationArgs
  ): Promise<CompanyRegistration> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompanyRegistration)
  @nestAccessControl.UseRoles({
    resource: "CompanyRegistration",
    action: "update",
    possession: "any",
  })
  async updateCompanyRegistration(
    @graphql.Args() args: UpdateCompanyRegistrationArgs
  ): Promise<CompanyRegistration | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyRegistration)
  @nestAccessControl.UseRoles({
    resource: "CompanyRegistration",
    action: "delete",
    possession: "any",
  })
  async deleteCompanyRegistration(
    @graphql.Args() args: DeleteCompanyRegistrationArgs
  ): Promise<CompanyRegistration | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: CompanyRegistration
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
